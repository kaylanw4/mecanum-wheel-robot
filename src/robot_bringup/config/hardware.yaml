# Enhanced Hardware Configuration with PID Control and Motor Calibration
# File: src/robot_bringup/config/enhanced_hardware.yaml

enhanced_yahboom_driver:
  ros__parameters:
    # Serial communication settings
    serial_port: "/dev/ttyUSB0"  # Change to /dev/ttyACM0 if needed
    serial_baudrate: 115200
    
    # Frame IDs
    imu_frame_id: "imu_link"
    base_frame_id: "base_link"
    odom_frame_id: "odom"
    
    # Publishing options
    publish_odom_tf: true  # Set to true if not using robot_localization
    
    # Robot physical parameters
    wheel_radius: 0.0395  # 40mm wheels
    wheelbase_width: 0.22  # Distance between left and right wheels
    wheelbase_length: 0.22  # Distance between front and rear wheels
    encoder_resolution: 2464  # 520 CPR * 4 (with quadrature)
    
    # ===== ODOMETRY CALIBRATION =====
    # These factors calibrate odometry to real-world measurements
    # Values > 1.0 = odometry reads too small (increase scale)
    # Values < 1.0 = odometry reads too large (decrease scale)
    # Start with all 1.0 and adjust based on real-world testing
    
    odom_linear_scale_x: 1.0   # Forward/backward distance calibration
    odom_linear_scale_y: 1.0   # Left/right strafe distance calibration  
    odom_angular_scale: 1.0    # Rotation angle calibration
    
    # Calibration procedure:
    # 1. Linear X (Forward): Move robot forward exactly 5.0m, measure odometry
    #    If odometry shows 4.5m → set odom_linear_scale_x: 1.111 (5.0/4.5)
    #    If odometry shows 5.5m → set odom_linear_scale_x: 0.909 (5.0/5.5)
    # 2. Linear Y (Strafe): Move robot left exactly 2.0m, measure odometry
    #    Adjust odom_linear_scale_y similarly
    # 3. Angular: Rotate robot exactly 360° (2π rad), measure odometry angle
    #    If odometry shows 300° → set odom_angular_scale: 1.2 (360/300)
    #    If odometry shows 400° → set odom_angular_scale: 0.9 (360/400)
    
    # ===== BASE VELOCITY SCALING =====
    # Controls overall speed range from joystick input
    # 0.1 = very slow, 0.3 = moderate, 0.5 = fast, 1.0 = maximum speed
    # Start with 0.3 for safe testing, increase as needed
    base_velocity_scale: 0.3  # Overall speed scaling factor
    
    # ===== FINE-TUNING CALIBRATION =====
    # These factors calibrate commanded velocities to real-world movement
    # Values > 1.0 = robot moves faster than commanded (decrease scale)
    # Values < 1.0 = robot moves slower than commanded (increase scale)
    # Start with all 1.0 and adjust based on real-world testing
    
    velocity_scale_x: 1.0  # Forward/backward velocity scaling
    velocity_scale_y: 1.0  # Left/right strafe velocity scaling
    velocity_scale_z: 1.0  # Rotation velocity scaling
    
    # ===== INDIVIDUAL MOTOR CALIBRATION =====
    # Calibration factors for individual motors to account for manufacturing differences
    # Values > 1.0 = speed up this motor, Values < 1.0 = slow down this motor
    # Start with all 1.0 and adjust based on testing
    # If robot drifts right when going straight: increase left motor factors OR decrease right motor factors
    
    motor_cal_fl: 1.0  # Front Left motor calibration factor
    motor_cal_fr: 1.0  # Front Right motor calibration factor  
    motor_cal_rl: 1.0  # Rear Left motor calibration factor
    motor_cal_rr: 1.0  # Rear Right motor calibration factor
    
    # Calibration procedure:
    # 1. Set all values to 1.0
    # 2. Command robot to drive straight forward at 0.2 m/s
    # 3. Measure which direction robot drifts
    # 4. Adjust calibration factors:
    #    - If drifts right: increase left motor factors OR decrease right motor factors
    #    - If drifts left: increase right motor factors OR decrease left motor factors
    # 5. Test again and fine-tune
    
    # Example adjustments:
    # Robot drifts right when going forward:
    #   motor_cal_fl: 1.05  # Speed up left motors
    #   motor_cal_rl: 1.05
    #   motor_cal_fr: 0.95  # Slow down right motors  
    #   motor_cal_rr: 0.95
    
    # ===== CONTROL PARAMETERS =====
    control_frequency: 50.0  # Hz - how often to update motor commands
    max_velocity: 2.75        # m/s - maximum linear velocity
    
    # Velocity limits for safety
    max_linear_velocity: 1.5   # m/s
    max_angular_velocity: 3.0  # rad/s
    
    # Motor stopping behavior
    use_immediate_braking: true  # Use reset_car_state for immediate stops (recommended: true)
    
    # Publishing rates
    imu_publish_rate: 50.0     # Hz
    odom_publish_rate: 20.0    # Hz  
    battery_publish_rate: 1.0  # Hz

# Enhanced joystick controller with gear system
enhanced_joystick_controller:
  ros__parameters:
    # Base velocities (will be multiplied by gear ratios)
    max_linear_vel: 1.0
    max_angular_vel: 2.0
    deadzone: 0.1
    
    # Gear ratios for fine control
    # Lower ratios = more precise control
    # Higher ratios = faster movement
    linear_gear_ratios: [0.2, 0.5, 0.8, 1.0]    # 4 linear gears
    angular_gear_ratios: [0.15, 0.3, 0.6, 1.0]  # 4 angular gears
    
    # Button debounce time (seconds)
    button_debounce_time: 0.5

# Joy node configuration for PS4 controller
joy_node:
  ros__parameters:
    device_id: 0
    deadzone: 0.1
    autorepeat_rate: 20.0
    coalesce_interval: 0.05

# Velocity smoother for Nav2 compatibility
velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    
    # Velocity limits [vx, vy, vtheta]
    max_velocity: [1.5, 1.5, 3.0]
    min_velocity: [-1.5, -1.5, -3.0]
    
    # Acceleration limits [ax, ay, atheta]
    max_accel: [2.0, 2.0, 2.0]
    max_decel: [-2.0, -2.0, -2.0]
    
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0